{"version":3,"sources":["logo.svg","reducers/page.js","reducers/user.js","reducers/index.js","store/configureStore.js","components/User.js","components/Page.js","containers/App.js","actions/PageActions.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","initialState","year","photos","name","rootReducer","combineReducers","page","state","arguments","length","undefined","action","type","Object","objectSpread","payload","user","store","createStore","User","_React$Component","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","key","value","props","react_default","a","createElement","React","Component","Page","_getPrototypeOf2","_this","_len","args","Array","_key","call","concat","onBtnClick","e","currentTarget","innerText","setYear","_this$props","onClick","App","setYearAction","className","src","logo","alt","User_User","Page_Page","connect","console","log","dispatch","Boolean","window","location","hostname","match","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a50ab092.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const initialState = {\r\n  year: 2018,\r\n  photos: [],\r\n};\r\n\r\nexport const pageReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'SET_YEAR':\r\n      return { ...state, year: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const initialState = {\r\n  name: 'Incognito',\r\n};\r\n\r\nexport function userReducer(state = initialState) {\r\n  return state;\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { pageReducer } from './page';\r\nimport { userReducer } from './user';\r\n\r\nexport const rootReducer = combineReducers({\r\n  page: pageReducer,\r\n  user: userReducer,\r\n});\r\n","import { createStore } from 'redux';\r\nimport { rootReducer } from '../reducers';\r\n\r\nexport const store = createStore(rootReducer);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class User extends React.Component {\r\n  render() {\r\n    const { name } = this.props;\r\n    return (\r\n      <div>\r\n        <p>Привет, {name}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nUser.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class Page extends React.Component {\r\n  onBtnClick = e => {\r\n    const year = +e.currentTarget.innerText;\r\n    this.props.setYear(year);\r\n  };\r\n\r\n  render() {\r\n    const { year, photos } = this.props;\r\n    return (\r\n      <div>\r\n        <div>\r\n          <button onClick={this.onBtnClick}>2018</button>\r\n          <button onClick={this.onBtnClick}>2017</button>\r\n          <button onClick={this.onBtnClick}>2016</button>\r\n          <button onClick={this.onBtnClick}>2015</button>\r\n          <button onClick={this.onBtnClick}>2014</button>\r\n        </div>\r\n        <p>\r\n          У тебя {photos.length} фото за {year} год\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPage.propTypes = {\r\n  year: PropTypes.number.isRequired,\r\n  photos: PropTypes.array.isRequired,\r\n  setYear: PropTypes.func.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { User } from '../components/User';\r\nimport { Page } from '../components/Page';\r\nimport { setYear } from '../actions/PageActions';\r\n\r\nimport logo from '../logo.svg';\r\n\r\nimport './App.scss';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    const { user, page, setYearAction } = this.props;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <img src={logo} className=\"App-logo\" alt=\"\" />\r\n        <header className=\"App-header\">\r\n          <h1 className=\"App-title\">Favorite photos</h1>\r\n        </header>\r\n        <User name={user.name} />\r\n        <Page photos={page.photos} year={page.year} setYear={setYearAction} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  user: PropTypes.object.isRequired,\r\n  page: PropTypes.object.isRequired,\r\n};\r\n\r\n// приклеиваем данные из store\r\nconst mapStateToProps = store => {\r\n  console.log(store); // посмотрим, что же у нас в store?\r\n  return {\r\n    user: store.user,\r\n    page: store.page,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setYearAction: year => dispatch(setYear(year)),\r\n});\r\n\r\n// в наш компонент App, с помощью connect(mapStateToProps)\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","export const setYear = year => ({\r\n  type: 'SET_YEAR',\r\n  payload: year,\r\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store/configureStore';\r\nimport App from './containers/App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}